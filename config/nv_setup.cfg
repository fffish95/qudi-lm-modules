
global:
    # list of modules to load when starting
    startup: []

    # Module server configuration for accessing qudi GUI/logic/hardware modules from remote clients
    remote_modules_server:
        address: 'localhost'
        port: 12345

    # Server port for serving the active qudi module namespace locally (localhost).
    # Used by e.g. the Qudi jupyter kernel.
    namespace_server_port: 18861

    # If this flag is set (True), all arguments passed to qudi module APIs from remote
    # (jupyter notebook, qudi console, remote modules) will be wrapped and passed "per value"
    # (serialized and de-serialized). This is avoiding a lot of inconveniences with using numpy in
    # remote clients.
    # If you do not want to use this workaround and know what you are doing, you can disable this
    # feature by setting this flag to False.
    force_remote_calls_by_value: True

    # Qss stylesheet for controlling the appearance of the GUIs.
    # Absolute path or relative to qudi.artwork.styles
    stylesheet: 'qdark.qss'

    # Default root directory for measurement data storage. All eventual data sub-directories should
    # be contained within this directory. This is not enforced, just convention.
    # The fallback directory is <user home>/qudi/Data/
    default_data_dir: 'C:\\Data\\'

    # Save data to daily data sub-directories by default
    daily_data_dirs: True

hardware:

    tagger:
        module.Class: 'local.timetagger.TT'
        options:            
            
            channels_params:
                ch1:
                    delay: 10000
                    # triggerLevel: 2 # range 0.5V-2.5V, with 50 Ohms impedance usually half input Volts is read out
                ch2:
                    delay: 10000

            #test_channels: [1,2] #[1,2,3,4,5,6,7]#[1,2, 4, -4]
            combined_channels: # Alias for combined channels must not start with 'ch'
                DetectorChans:
                    - 'ch1'
                    - 'ch2'


    tagger_dummy: # Use tagger_dummy for sps_setup when you don't have timetagger connected.
        module.Class: 'local.timetagger_dummy.TT'

    nicard: #national instrument card for laser scanner and attocube
        module.Class: 'local.ni_card.NICard'
        options:
            device_name: 'Dev1'  

    scanner: # Scan mirror control
        module.Class: 'local.nitt.NITT'
        connect:
            nicard: 'nicard'
            timetagger: 'tagger'
        options:
            scanner_ao_channels:
                - 'AO0'
                - 'AO1'
                - 'AO2'
                - 'AO3'
            scanner_voltage_ranges:
                # - [-8, 10]
                # - [-8, 10]
                - [-10, 10]
                - [-10, 10]
                - [-10, 10]
                - [-4, 4]
            scanner_position_ranges:
                # - [0, 236e-6]
                # - [0, 165e-6]
                - [0, 140e-6]
                - [0, 140e-6]
                - [0, 140e-6]
                - [0, 9144]
            scanner_clock_channel:
                - 'ctr0'
            trigger_clock_channel:
                - 'ctr1'
            pixel_clock_channel:
                - 'pfi0'
            trigger_pixel_clock_channel:
                - 'pfi1'            
            timetagger_channels:
                - 'ch1'
                - 'ch2'
                - 'DetectorChans'
            timetagger_cbm_begin_channel:
                - 'ch8'
            timetagger_cbm_trigger_begin_channel:
                - 'ch7'
            channel_labelsandunits:
                'ch1': {'label': 'Fluorescence', 'unit': 'c/s'}
                'ch2': {'label': 'Fluorescence', 'unit': 'c/s'}
                'DetectorChans': {'label': 'Fluorescence', 'unit': 'c/s'}

    stepmotor_dummy:
        module.Class: 'local.step_motor_dummy.StepMotor'
    
    microwave_dummy:
        module.Class: 'dummy.microwave_dummy.MicrowaveDummy'


    mw_source_smiq:
        module.Class: 'local.mw_source_smiq.MicrowaveSmiq'
        options:
            visa_address: 'GPIB0::28::INSTR'
            comm_timeout: 10000  # in milliseconds
            visa_baud_rate: null  # optional
            rising_edge_trigger: True  # optional
            frequency_min: null  # optional, in Hz
            frequency_max: null  # optional, in Hz
            power_min: null  # optional, in dBm
            power_max: null  # optional, in dBm


logic:

    timetagger_instream_interfuse:
        module.Class: 'local.timetagger_instream_interfuse.TTInstreamInterfuse'
        connect:
            timetagger: 'tagger'
        options:
            available_channels:  
                - 'ch1'
                - 'ch2'
                - 'ch7'
                - 'ch8'
                - 'DetectorChans'
            sample_rate: 50
            buffer_size: 10000000

    timeserieslogic:
        module.Class: 'local.time_series_reader_logic.TimeSeriesReaderLogic'
        connect:
            _streamer_con: 'timetagger_instream_interfuse'
            _savelogic_con: 'savelogic'
        options:
            max_frame_rate: 10  # optional (10Hz by default) should be > 2/trace_window_size
            calc_digital_freq: True  # optional (True by default)
    
    savelogic:
        module.Class: 'local.save_logic.SaveLogic'
        options:
            win_data_directory: 'C:/Data'   # DO NOT CHANGE THE DIRECTORY HERE! ONLY IN THE CUSTOM FILE!
            unix_data_directory: 'Data/'
            log_into_daily_directory: False # always False conflicts with new qudi
            save_pdf: True
            save_png: True
    

    sps_confocallogic:
        module.Class: 'local.sps_confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'sps_scanner_tilt_interfuse'
            loopscanlogic1: 'sps_loopscanlogic'
            savelogic: 'savelogic'
        

    timetaggerlogic:
        module.Class: 'local.timetagger_logic.TimeTaggerLogic'
        connect:
            timetagger: 'tagger'
            savelogic: 'savelogic' 

    sps_scanner_tilt_interfuse:
        module.Class: 'local.sps_scanner_tilt_interfuse.ScannerTiltInterfuse'
        connect:
            confocalscanner1: 'scanner'

    fitlogic:
        module.Class: 'local.fit_logic.FitLogic'

    sps_optimizerlogic:
        module.Class: 'local.optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'sps_scanner_tilt_interfuse'
            fitlogic: 'fitlogic'


    sps_loopscanlogic:
        module.Class: 'local.sps_loop_scan_logic.SPSLoopScanLogic'
        connect:
            stepmotor1: 'stepmotor_dummy'
            nicard: 'nicard' # nicard for scanmirror line trigger output

    odmr_logic:
        module.Class: 'local.odmr_logic.OdmrLogic'
        connect:
            microwave: 'mw_source_smiq'
            data_scanner: 'scanner'

gui:
    timeseries:
        module.Class: 'local.time_series.time_series_gui.TimeSeriesGui'
        connect:
            _time_series_logic_con: 'timeserieslogic'
        options:
            use_antialias: True  # optional, set to False if you encounter performance issues
    
    scanmirror_controller:
        module.Class: 'local.sps_confocal.sps_confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'sps_confocallogic'
            savelogic: 'savelogic'
            optimizerlogic1: 'sps_optimizerlogic'
        options:
            fixed_aspect_ratio_xy: True
            fixed_aspect_ratio_depth: True
            image_x_padding: 0.02
            image_y_padding: 0.02
            image_z_padding: 0.02
            default_meter_prefix: 'u'

    timetagger:
        module.Class: 'local.timetagger.timetagger.TTGui'
        connect:
            timetaggerlogic: 'timetaggerlogic'
            savelogic: 'savelogic'

    odmr_gui:
        module.Class: 'local.odmr.odmrgui.OdmrGui'
        connect:
            odmr_logic: 'odmr_logic'